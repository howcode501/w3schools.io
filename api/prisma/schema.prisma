// -------------------------------------
// WARNING
// THIS FILE IS AUTOGENERATED BY PRISMERGE
// DO NOT MANUALLY EDIT THIS FILE!
// -------------------------------------

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("ULS_API_POSTGRES_URI")
  //url      = env("DB_URI")
}

model User {
  id                              String                @id @default(cuid())
  created                         DateTime              @default(now())
  name                            String                @unique
  user_icon_id                    Int?                  @unique
  actions_api_token               String?
  actions_api_text                String?
  auth                            AuthProfile?
  auditLog                        AuditLog[]
  oneTimeToken                    OneTimeToken[]
  tokens                          RefreshToken?
  profile                         UserProfile?
  roles                           Role[]                @relation("user_roles")
  payment_method                  UserPaymentMethod[]
  deleted                         DateTime?
  Notification                    Notification[]
  user_products_apps_features     UserProductAppFeature[]
  user_subscriptions              UserSubscription[]
  user_devices                    UserAppDeviceId[]
  attachments                     Attachment?           @relation(fields: [user_icon_id], references: [id])

  @@map("users")
}

model AuthProfile {
  id             Int         @id @default(autoincrement())
  user_id        String      @unique
  auth_method_id Int
  auth_method    AuthMethod  @relation(fields: [auth_method_id], references: [id])
  enabled        Boolean     @default(false)
  password       String?
  user           User        @relation(fields: [user_id], references: [id])

  @@map("auth_profiles")
}

model AuthMethod {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  display_name String
  enabled      Boolean       @default(true)
  AuthProfile  AuthProfile[]

  @@map("auth_method")
}

model UserProfile {
  id                    Int     @id @default(autoincrement())
  user_id               String  @unique
  stripe_customer_id    String?
  first_name            String?
  last_name             String?
  email                 String  @unique
  email_validated       Boolean @default(false)
  avatar                String?
  user                  User    @relation(fields: [user_id], references: [id])

  @@map("user_profiles")
}

model UserPaymentMethod {
  id                    Int               @id @default(autoincrement())
  user_id               String            
  payment_id            String            @unique
  is_default            Boolean           @default(false)
  payment_merchant      PaymentMerchant   @default(STRIPE)
  created               DateTime          @default(now())
  user                  User              @relation(fields: [user_id], references: [id])

  @@map("user_payment_methods")
}

model Attachment {
  id              Int              @id @default(autoincrement())
  file_name       String
  file_name_org   String?
  public_url      String? 
  attachment_type AttachmentType   @default(Product)
  products        Product?
  apps            App?                 
  features        Feature? 
  subscriptions   Subscription?
  users           User?

  @@map("attachments")
}

model AuditLog {
  id      Int      @id @default(autoincrement())
  user_id String
  event   String
  data    Json?
  created DateTime @default(now())
  user    User     @relation(fields: [user_id], references: [id])

  @@map("audit_log")
}

model Role {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  display_name     String
  description      String?
  created          DateTime          @default(now())
  can_delete       Boolean           @default(true)
  can_edit_options Boolean           @default(true)
  hidden           Boolean           @default(false)
  enabled          Boolean           @default(false)
  option_values    RoleOptionValue[]
  users            User[]            @relation("user_roles")

  @@map("roles")
}

model RoleOption {
  id            Int               @id @default(autoincrement())
  name          String            @unique
  display_name  String
  category      String?
  description   String?
  enabled       Boolean           @default(false)
  option_values RoleOptionValue[]

  @@map("role_options")
}

model RoleOptionValue {
  id        Int        @id @default(autoincrement())
  value     Boolean    @default(false)
  role_id   Int
  option_id Int
  option    RoleOption @relation(fields: [option_id], references: [id])
  role      Role       @relation(fields: [role_id], references: [id])

  @@map("role_option_values")
}

model WebSession {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime

  @@map("web_sessions")
}

model RefreshToken {
  id          String   @id @default(cuid())
  user_id     String   @unique
  created     DateTime @default(now())
  remember_me Boolean  @default(false)
  valid_until Int
  user        User     @relation(fields: [user_id], references: [id])

  @@map("refreshtokens")
}

model OneTimeToken {
  id          String    @id @default(cuid())
  user_id     String
  token       String
  type        TokenType @default(PasswordReset)
  created     DateTime  @default(now())
  valid_until Int
  valid       Boolean   @default(true)
  user        User      @relation(fields: [user_id], references: [id])

  @@map("onetimetokens")
}

model Notification {
  id                   Int                 @id @default(autoincrement())
  user_id              String
  not_type_id          Int
  notification_type    NotificationType    @relation(fields: [not_type_id], references: [id])
  notifier_id          Int?
  data                 Json?
  created              DateTime            @default(now())
  status_id            Int?
  nontification_status NotificationStatus? @relation(fields: [status_id], references: [id])

  is_read     Boolean @default(false)
  is_archived Boolean @default(false)
  user        User    @relation(fields: [user_id], references: [id])

  @@map("notification")
}

model NotificationType {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  created      DateTime       @default(now())
  deleted      DateTime?
  Notification Notification[]

  @@map("notification_type")
}

model NotificationStatus {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  created      DateTime       @default(now())
  deleted      DateTime?
  Notification Notification[]

  @@map("notification_status")
}

model Product {
  id                                Int                   @id @default(autoincrement())
  product_order                     Int?
  product_name                      String                @unique
  product_id                        String?               @unique
  product_status                    Boolean               @default(true)
  product_description               String?
  product_learn_more                String?
  product_icon_id                   Int?                  @unique
  apps                              App[]                 
  features                          Feature[]            
  created                           DateTime              @default(now())
  deleted                           DateTime?
  attachments                       Attachment?           @relation(fields: [product_icon_id], references: [id])
  subscriptions                     Subscription[]        @relation("subscription_products")
  promo_codes                       PromoCode[]           @relation("promocode_products")
  user_products_apps_features       UserProductAppFeature[]
 

  @@map("products")
}

model App {
  id                                  Int                   @id @default(autoincrement())
  product_id                          Int
  app_name                            String?               @unique
  app_id                              String?               @unique
  app_status                          Boolean               @default(true)
  app_active_url                      String?
  app_inactive_url                    String?
  app_mailchimp_tag                   String[]              @default(["NotSet"])
  app_shopify_fulfill                 String[]              @default(["NotSet"]) 
  app_shopify_unfulfill               String[]              @default(["NotSet"])
  app_icon_id                         Int?                  @unique
  created                             DateTime              @default(now())
  deleted                             DateTime?
  products                            Product               @relation(fields: [product_id], references: [id])
  attachments                         Attachment?           @relation(fields: [app_icon_id], references: [id])
  subscriptions                       Subscription[]        @relation("subscription_apps")
  promo_codes                         PromoCode[]           @relation("promocode_apps")
  user_products_apps_features         UserProductAppFeature[]
 
 
  @@map("apps")
}

model Feature {
  id                                      Int                   @id @default(autoincrement())
  product_id                              Int
  feature_name                            String?               @unique
  feature_id                              String?               @unique
  feature_status                          Boolean               @default(true)
  feature_active_url                      String?
  feature_inactive_url                    String?
  feature_mailchimp_tag                   String[]              @default(["NotSet"])
  feature_shopify_fulfill                 String[]              @default(["NotSet"])  
  feature_shopify_unfulfill               String[]              @default(["NotSet"])
  feature_icon_id                         Int?                  @unique
  book_is_dictinoary                      Boolean               @default(false)
  book_purchase_link                      String?
  book_isbn_number_10                     String?
  book_isbn_number_13                     String?
  book_json_path                          String?
  book_json_file_name                     String?
  book_json_id                            Int?
  created                                 DateTime              @default(now())
  deleted                                 DateTime?
  products                                Product               @relation(fields: [product_id], references: [id])
  attachments                             Attachment?           @relation(fields: [feature_icon_id], references: [id])
  subscriptions                           Subscription[]        @relation("subscription_features")
  promo_codes                             PromoCode[]           @relation("promocode_features")
  user_products_apps_features             UserProductAppFeature[]
 
 
  @@map("features")
}

model Subscription {
  id                                        Int                        @id @default(autoincrement())
  stripe_product_id                         String?
  subscription_name                         String                     @unique
  subscription_description                   String?
  subscription_icon_id                      Int?                       @unique
  mailchimp_tag                             String[]                   @default(["NotSet"])
  created                                   DateTime                   @default(now())
  deleted                                   DateTime?
  status                                    Boolean                    @default(true)
  attachments                               Attachment?                @relation(fields: [subscription_icon_id], references: [id])
  products                                  Product[]                  @relation("subscription_products")
  apps                                      App[]                      @relation("subscription_apps")
  features                                  Feature[]                  @relation("subscription_features")
  subscription_pricing_plan                 SubscriptionPricingPlan[]
  promo_codes                               PromoCode[]                @relation("promocode_subscriptions")
  user_subscriptions                        UserSubscription[]

  @@map("subscriptions")
}

model SubscriptionPricingPlan {
  id                        Int                        @id @default(autoincrement())
  stripe_price_id           String?
  subscription_id           Int
  time_option_date          Int?
  time_option_frequency     SubscriptionFrequency      @default(DAY)
  price                     Int?                  
  free_with_new_account     Boolean                    @default(true)
  description               String?
  shopify_fulfill           String[]                   @default(["NotSet"])  
  shopify_unfulfill         String[]                   @default(["NotSet"])
  status                    Boolean                    @default(true)
  created                   DateTime                   @default(now())
  deleted                   DateTime?
  subscriptions             Subscription               @relation(fields: [subscription_id], references: [id])
  promo_codes               PromoCode[]                @relation("promocode_subscription_pricing_plans")
  user_subscriptions        UserSubscription[]
  
  @@map("subscription_pricing_plan")
}

model PromoCode {
  id                        Int                        @id @default(autoincrement())
  user_id                   String?
  user_email                String?
  code                      String                     @unique
  description               String?
  activated_details         String?
  status                    Boolean                    @default(true)
  created                   DateTime                   @default(now())
  expire_date_time          DateTime?                 
  activated_date_time       DateTime?
  deleted                   DateTime?
  products                  Product[]                  @relation("promocode_products")
  apps                      App[]                      @relation("promocode_apps")
  features                  Feature[]                  @relation("promocode_features")
  subscriptions             Subscription[]             @relation("promocode_subscriptions")
  subscription_pricing_plan SubscriptionPricingPlan[]  @relation("promocode_subscription_pricing_plans")
  
  @@map("promo_codes")
}

model UserProductAppFeature {
  id                        Int                           @id @default(autoincrement())
  user_id                   String
  product_id                Int?
  app_id                    Int?
  feature_id                Int?
  activated_by              String?
  description               String?
  data_type                 String                    
  status                    Boolean                       @default(false)
  visible_status            UserProductAppFeatureStatus   @default(Global)            
  created                   DateTime                      @default(now())
  activated_date_time       DateTime?
  deleted                   DateTime?
  product                   Product?                      @relation(fields: [product_id], references: [id])
  app                       App?                          @relation(fields: [app_id], references: [id])
  feature                   Feature?                      @relation(fields: [feature_id], references: [id])
  user                      User                          @relation(fields: [user_id], references: [id])
  
  @@map("user_products_apps_features")
}

model UserSubscription {
  id                            Int                           @id @default(autoincrement())
  user_id                       String
  subscription_id               Int
  subscription_plan_id          Int
  activated_by                  String?
  description                   String?
  auto_subscription             Boolean                       @default(false)
  stripe_subscription_id        String?
  stripe_canceled_at            DateTime?
  stripe_current_period_end     DateTime?
  stripe_current_period_start   DateTime?
  stripe_start_date             DateTime?
  stripe_ended_at               String?
  stripe_plan_amount            String?
  stripe_plan_count             String?
  stripe_plan_interval          String?
  stripe_status                 String?
  subscription_group_id         String?
  subscription_name             String?
  subscription_prod_id          String?
  time_option_date              Int?
  time_option_frequency         SubscriptionFrequency         @default(DAY)
  created                       DateTime                      @default(now())
  activated_date_time           DateTime?
  deleted                       DateTime?
  checked_canceled              Boolean                       @default(false)
  subscriptions                 Subscription                  @relation(fields: [subscription_id], references: [id])
  subscription_pricing_plan     SubscriptionPricingPlan       @relation(fields: [subscription_plan_id], references: [id])
  user                          User                          @relation(fields: [user_id], references: [id])
  
  @@map("user_subscriptions")
}

model SystemConfig {
  id                            Int                           @id @default(autoincrement())
  name                          String                        @unique
  value                         String?
  status                        Boolean                       @default(true)
  field_type                    String
  
  @@map("system_config")
}


model ApiKeys {
  id                            Int                           @id @default(autoincrement())
  email                         String                        @unique
  key                           String
  routes                        Json?
  status                        Boolean                       @default(true)
  
  @@map("api_keys")
}


model UserAppDeviceId {
  id                            Int                           @id @default(autoincrement())
  user_id                       String
  app_id                        String?                       
  feature_id                    String?
  device_id                     String?
  last_used                     DateTime?
  created                       DateTime                      @default(now())
  updated                       DateTime?
  user                          User                          @relation(fields: [user_id], references: [id])
  
  @@map("user_app_device_id")
}


model Shopify {
  id                            Int                           @id @default(autoincrement())
  order_id                      String?
  order_number                  String?
  email                         String?
  message                       String?
  redeem_code                   String?
  mail                          String?
  apps                          Json?
  Features                      Json?                       
  fullfilled_line_items         Json?
  request_object                Json?
  user_exits                    Boolean                       @default(false)
  purchased                     Boolean                       @default(false)
  mail_sent                     Boolean                       @default(false)
  last_used                     DateTime?
  created                       DateTime                      @default(now())
  updated                       DateTime?
  
  @@map("shopify")
}


//enums
enum SubscriptionFrequency {
  DAY
  WEEK
  MONTH
  YEAR
}



enum TriState {
  NotSet
  Enabled
  Disabled
}

enum UserProductAppFeatureStatus {
  Global
  Visible
  Hidden
}

enum TokenType {
  PasswordReset
}

enum PaymentMerchant {
  STRIPE
  PAYPAL
}

enum AttachmentType {
  User
  Subscription
  Subscription_Static
  Product
  App
  Feature
  BookJSON
}